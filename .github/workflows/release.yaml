name: Semantic Release

on:
  push:
    branches: [ "main" ] # Only run on pushes to the main branch
  pull_request:
    branches: [ "main" ]

jobs:
    build:
        runs-on: ubuntu-latest
        concurrency: release
        permissions:
            id-token: write
            contents: write

        steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Set up Python 3.12
          uses: actions/setup-python@v5
          with:
            python-version: "3.12"
        - name: Get full Python version
          id: full-python-version
          run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

        - name: Bootstrap poetry
          run: |
            curl -sSL https://install.python-poetry.org | python - -y

        - name: Configure poetry
          run: poetry config virtualenvs.in-project true

        - name: Set up cache
          uses: actions/cache@v4
          id: cache
          with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

        - name: Ensure cache is healthy
          if: steps.cache.outputs.cache-hit == 'true'
          run: |
            # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
            timeout 10s poetry run pip --version || rm -rf .venv

        - name: Check lock file
          run: poetry check --lock

        - name: Install dependencies
          run: poetry install --with dev

        - name: Python Semantic Release
          id: semanticrelease
          uses: python-semantic-release/python-semantic-release@master
          with:
            git_committer_name: ${{ secrets.GIT_COMMITTER_NAME }}
            git_committer_email: ${{ secrets.GIT_COMMITTER_EMAIL }}
            github_token: ${{ secrets.GITHUB_TOKEN }}
            ssh_public_signing_key: ${{ secrets.SIGNING_KEY_PUB }}
            ssh_private_signing_key: ${{ secrets.SIGNING_KEY_PRIV }}

        - name: Build package distributions
          run: poetry build
          if: steps.semanticrelease.outputs.released == 'true'

        - name: Store package distributions
          uses: actions/upload-artifact@v4
          with:
            name: python-package-distributions
            path: dist/

        outputs:
            released: ${{ steps.semanticrelease.outputs.released }}

    publish-to-pypi:
        name: >-
            Publish Python 🐍 distribution 📦 to PyPI
        # only run if the build job step semanticrelease has released
        if: ${{ needs.build.outputs.released == 'true' }}
        needs:
        - build
        runs-on: ubuntu-latest
        environment:
            name: pypi
            url: https://pypi.org/p/smac-fastapi-auth  # Replace <package-name> with your PyPI project name
        permissions:
            id-token: write  # IMPORTANT: mandatory for trusted publishing

        steps:
        - name: Download all the dists
          uses: actions/download-artifact@v3
          with:
            name: python-package-distributions
            path: dist/
        - name: Publish distribution 📦 to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1

    github-release:
        name: >-
            Sign the Python 🐍 distribution 📦 with Sigstore
            and upload them to GitHub Release
        needs:
        - publish-to-pypi
        runs-on: ubuntu-latest

        permissions:
            contents: write  # IMPORTANT: mandatory for making GitHub Releases
            id-token: write  # IMPORTANT: mandatory for sigstore

        steps:
        - name: Download all the dists
          uses: actions/download-artifact@v3
          with:
            name: python-package-distributions
            path: dist/
        - name: Sign the dists with Sigstore
          uses: sigstore/gh-action-sigstore-python@v2.1.1
          with:
            inputs: >-
                ./dist/*.tar.gz
                ./dist/*.whl
        - name: Create GitHub Release
          env:
            GITHUB_TOKEN: ${{ github.token }}
          run: >-
            gh release create
            '${{ github.ref_name }}'
            --repo '${{ github.repository }}'
            --notes ""
        - name: Upload artifact signatures to GitHub Release
          env:
            GITHUB_TOKEN: ${{ github.token }}
          # Upload to GitHub Release using the `gh` CLI.
          # `dist/` contains the built packages, and the
          # sigstore-produced signatures and certificates.
          run: >-
            gh release upload
            '${{ github.ref_name }}' dist/**
            --repo '${{ github.repository }}'
